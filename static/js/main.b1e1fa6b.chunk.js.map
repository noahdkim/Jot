{"version":3,"sources":["Calendar.js","Task.js","Notes.js","App.js","serviceWorker.js","index.js"],"names":["Calendar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","date","changeDate","state","calendarType","react_default","a","createElement","className","entry","value","Component","Task","mouseEnter","console","log","setState","isMouseInside","mouseLeave","deleteNote","id","_this2","onMouseEnter","onMouseLeave","ListItem_default","Checkbox_default","checked","onClick","checkboxOnClick","TextField_default","onKeyPress","e","handleItemKeypress","updateItem","content","ListItemSecondaryAction_default","IconButton_default","aria-label","Delete_default","Note","listItems","notes","map","note","index","src_Task","key","Card_default","style","maxHeight","backgroundColor","overflow","CardHeader_default","title","List_default","CardActions_default","Button_default","size","markAllComplete","NavBar","AppBar_default","position","Toolbar_default","Typography_default","variant","color","App","newState","length","splice","event","target","addNewNote","forEach","updateDate","newDate","prevDate","updateNotes","thedate","currDate","Date","setHours","loadSavedState","window","addEventListener","ev","removeEmptyItems","localStorage","setItem","getMonth","getFullYear","join","JSON","stringify","prevDateString","getTime","getYear","toLocaleDateString","push","moreEmpty","dateFinalItem","pop","Grid_default","container","xs","justify","src_Calendar","item","Notes","prevState","prevIndex","isNaN","monthYear","savedNotes","parse","getItem","savedState","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b1e1fa6b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {Calendar as Cal} from 'react-calendar';\n\nclass Calendar extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      date: props.date,\n    }\n    this.calendarType=props.calendarType\n  }\n\n  onChange=date => this.props.changeDate(date)\n\n  render() {\n    return (\n      <div className=\"calendar\">\n        <Cal\n          onChange={this.onChange}\n          calendarType={this.calendarType}\n          value={this.props.date}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Calendar\n","import Checkbox from '@material-ui/core/Checkbox';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport IconButton from '@material-ui/core/IconButton';\nimport React, { Component } from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport TextField from '@material-ui/core/TextField';\n\nclass Task extends Component {\n  constructor(props) {\n    super(props);\n    this.deleteNote = this.props.deleteNote(this.props.id);\n    this.state={\n      isMouseInside: false\n    };\n  }\n\n\n  mouseEnter = () => {\n    console.log(\"enter\");\n    this.setState({ isMouseInside: true });\n  }\n  mouseLeave = () => {\n    console.log(\"exit\");\n    this.setState({ isMouseInside: false });\n  }\n\n\n  render(){\n    return(\n      <div onMouseEnter={this.mouseEnter} onMouseLeave={this.mouseLeave}>\n        <ListItem >\n          <Checkbox\n          checked={this.props.checked}\n          onClick={this.props.checkboxOnClick(this.props.checked, this.props.id)}\n                />\n          <TextField\n            onKeyPress={(e)=>this.props.handleItemKeypress(e, this.props.id)}\n            onChange={(e)=>this.props.updateItem(e, this.props.id)}\n            value={this.props.content}\n          />\n          <ListItemSecondaryAction>\n             {this.state.isMouseInside ? <IconButton aria-label=\"Delete\"\n                                             onClick={this.deleteNote}\n                                            >\n               <DeleteIcon/>\n             </IconButton> : null}\n\n          </ListItemSecondaryAction>\n        </ListItem>\n      </div>\n\n    );\n  }\n\n}\n\nexport default Task\n","import Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport Task from './Task'\nimport List from '@material-ui/core/List';\n\nimport React, { Component } from 'react';\n\nclass Note extends Component {\n\n  render(){\n    const listItems = this.props.notes[this.props.date].map((note, index) =>\n        <Task\n          id={index}\n          checked={note.checked}\n          handleItemKeypress={this.props.handleItemKeypress}\n          key={index}\n          checkboxOnClick={this.props.checkboxOnClick}\n          updateItem={this.props.updateItem}\n          content={note.content}\n          deleteNote={this.props.deleteNote}\n        />\n    );\n\n    var cardStyle = {\n      maxHeight: '75vh',\n      backgroundColor: \"#FFBBAA\",\n      overflow: 'auto',\n    }\n\n\n\n    return(\n      <div className=\"note\">\n        <Card className=\"notesCard\" style={cardStyle}>\n          <CardHeader\n            title={this.props.date}\n            className=\"note-header\"\n            >\n\n          </CardHeader>\n          <List>\n              {listItems}\n          </List>\n          <CardActions>\n            <Button size=\"small\" onClick={this.props.markAllComplete}>Mark all complete</Button>\n          </CardActions>\n      </Card>\n    </div>\n\n    );\n  }\n\n}\n\nexport default Note\n","import AppBar from '@material-ui/core/AppBar';\nimport Calendar from './Calendar'\nimport Grid from '@material-ui/core/Grid';\nimport Notes from './Notes'\nimport React, { Component } from 'react';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport 'typeface-roboto';\n\nfunction dateToEpoch(thedate) {\n  thedate.setHours(0,0,0,0);\n  return thedate;\n}\n\nfunction NavBar(props) {\n  return (\n    <div className=\"navBar\">\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" color=\"inherit\">\n            Jot\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    var currDate = dateToEpoch(new Date());\n    this.state=App.loadSavedState(currDate);\n\n    // make sure notes are saved before leaving the page\n    window.addEventListener(\"beforeunload\", (ev) =>\n      {\n        var date = new Date(this.state.date);\n        this.removeEmptyItems(this.state.date);\n        localStorage.setItem([date.getMonth()+1, date.getFullYear()].join('/'),\n                              JSON.stringify(this.state.notes));\n      });\n  }\n\n  // add a new note to the state\n  static addNewNote = (prevState, date, prevIndex) => {\n    var newState = prevState;\n    if (!newState.notes[date]){\n      newState.notes[date] = [];\n    }\n    if (isNaN(prevIndex)){\n      prevIndex = newState.notes[date].length-1;\n    }\n    var newNote = {\n                    checked: false,\n                    content:'',\n                  }\n    newState.notes[date].splice(prevIndex+1, 0, newNote);\n    return newState;\n  }\n\n  // handle the checkbox click behavior\n  checkboxOnClick = (value, id) => () => {\n    var newState = this.state;\n    newState.notes[this.state.date][id].checked = !value;\n    this.setState(newState);\n  };\n\n  deleteNote = (id) => () => {\n    if (this.state.notes[this.state.date].length > 1){\n      var newState = this.state;\n      newState.notes[this.state.date].splice(id, 1);\n      this.setState(newState);\n    }\n  }\n\n  // handle special keypresses\n  handleItemKeypress = (event, id) => {\n      if(event.key === 'Enter' && event.target.value.length !== 0){\n        var newState = App.addNewNote(this.state, this.state.date, id);\n        this.setState(newState);\n      }\n  }\n\n  // load saved notes from localStorage\n  static loadSavedState = (date) => {\n    var monthYear = [date.getMonth()+1, date.getFullYear()].join('/');\n    var savedNotes = JSON.parse(localStorage.getItem(monthYear));\n    var savedState = {};\n    savedState.date = date.toLocaleDateString();\n\n    // add a blank note at the end\n    if (!savedNotes) {\n      savedNotes = {};\n    }\n    savedState.notes = savedNotes;\n    App.addNewNote(savedState, savedState.date);\n    return savedState;\n  }\n\n  markAllComplete = () => {\n    var newState = this.state;\n    var newNotes = newState.notes[this.state.date];\n    newNotes.forEach((note)=> {\n      if (note.content.length > 0){\n        note.checked=true;\n      }\n    } );\n    this.setState(newState);\n  }\n\n  // Upon calendar changing date, update state and notes\n  updateDate=(newDate) => {\n    var prevDate = this.state.date;\n    var newState = this.state;\n    newState.date = newDate;\n    this.setState(newState);\n    this.updateNotes(prevDate);\n  }\n\n  // keep the item in state updated\n  updateItem = (e, id) => {\n    var newState = this.state;\n    newState.notes[this.state.date][id].content = e.target.value;\n    this.setState(newState)\n  };\n\n  updateNotes(prevDateString) {\n    var prevDate = new Date(prevDateString);\n    var newDate = new Date(this.state.date);\n    // Need to compare getTime otherwise always evaluates to True\n    if (prevDate.getTime() === newDate.getTime()){\n      return;\n    }\n\n    // Remove all empty items at the end of a list\n    this.removeEmptyItems(prevDateString);\n\n    // if the month or year change, save the state\n    if (prevDate.getMonth() !== this.state.date.getMonth() ||\n          prevDate.getYear() !== this.state.date.getYear()) {\n      localStorage.setItem([prevDate.getMonth()+1, prevDate.getFullYear()].join('/'),\n                            JSON.stringify(this.state.notes));\n      this.setState((App.loadSavedState(this.state.date)));\n    } else {\n      // otherwise just change the date\n      var newState = this.state;\n      newState.date = this.state.date.toLocaleDateString();\n      // if the list of notes at that date doesn't exist or is empty, initialize the list\n      if (!newState.notes[newState.date]){\n        newState.notes[newState.date] = [{\n                        checked: false,\n                        content:'',\n                      }]\n      } else {\n        newState.notes[newState.date].push({\n                        checked: false,\n                        content:'',\n                      });\n      }\n      return newState;\n    }\n  }\n\n  removeEmptyItems(date){\n    // Remove all empty items at the end of a list\n    var moreEmpty = true;\n    while (moreEmpty){\n      var dateFinalItem = this.state.notes[date].pop();\n      if (!dateFinalItem){\n        delete this.state.notes[date];\n        moreEmpty = false;\n      }\n      else if (dateFinalItem.content.length !== 0 || dateFinalItem.checked){\n        this.state.notes[date].push(dateFinalItem);\n        moreEmpty = false;\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <NavBar/>\n        <Grid container>\n          <Grid container xs={6} justify={'center'}>\n              <Calendar\n              calendarType=\"US\"\n              changeDate={this.updateDate}\n              date={new Date(this.state.date)}\n              />\n          </Grid>\n          <Grid item xs={4}>\n          <Notes\n          date={this.state.date}\n          deleteNote={this.deleteNote}\n          notes = {this.state.notes}\n          checkboxOnClick={this.checkboxOnClick}\n          handleItemKeypress={this.handleItemKeypress}\n          updateItem={this.updateItem}\n          markAllComplete={this.markAllComplete}\n          />\n          </Grid>\n        </Grid>\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost=Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl=new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl=`${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound=() => {\n        const installingWorker=registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange=() => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType=response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}